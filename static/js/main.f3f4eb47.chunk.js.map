{"version":3,"sources":["App.js","index.js"],"names":["App","bgImage","api","useState","cityname","setcityname","reqUrl","currentTemp","setTemp","currentDescription","setDescription","currentLocation","setLocation","currentDate","setDate","getWeather","url","fetch","then","response","json","Math","round","main","temp","weather","description","name","sys","country","utc","Date","getTime","getTimezoneOffset","offset","timezone","d","date","toString","slice","time","toLocaleString","hour","minute","hour12","catch","e","className","onSubmit","preventDefault","type","placeholder","onChange","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAuHeA,MA9Gf,WACE,IAgFIC,EAhFEC,EACA,mCADAA,EAEI,2CAIV,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAgBC,EAAhB,KAMMC,EAAM,UAAMJ,EAAN,qBAA8BE,EAA9B,+BAA6DF,GAKzE,EAA8BC,qBAA9B,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA6CL,mBAAU,IAAvD,mBAAOM,EAAP,KAA2BC,EAA3B,KACA,EAAuCP,mBAAS,IAAhD,mBAAOQ,EAAP,KAAwBC,EAAxB,KACA,EAA+BT,mBAAS,IAAxC,mBAAOU,EAAP,KAAoBC,EAApB,KAaMC,EAAa,SAAUC,GAE3BC,MAAMD,GACLE,MAAK,SAASC,GACbA,EAASC,OACRF,MAAM,SAAUE,GAEfZ,EAAQa,KAAKC,MAAMF,EAAKG,KAAKC,OAC7Bd,EAAeU,EAAKK,QAAQ,GAAGC,aAC/Bd,EAAY,GAAD,OAAIQ,EAAKO,KAAT,aAAkBP,EAAKQ,IAAIC,UAQtC,IAIMC,GAJY,IAAIC,MAAOC,UAGwB,KAAjC,IAAID,MAAOE,oBAEzBC,EAAuB,IAAdd,EAAKe,SAEdC,EAAI,IAAIL,KAAMD,EAAOI,GAGrBG,EAAOD,EAAEE,WAAWC,MAAM,EAAE,IAC5BC,EAAOJ,EAAEK,eACb,QACA,CAAEC,KAAM,UACRC,OAAQ,UACRC,QAAQ,IAGV9B,EAAQ,GAAD,OAAIuB,EAAJ,aAAaG,IACpBnC,EAAY,OAEXwC,OAAM,SAACC,GACRlC,EAAY,oCAalB,OAHEX,EADEM,EAAc,GACN,OACK,OAIf,sBAAKwC,UAAa,cAAgB9C,EAAlC,UACE,sBAAM8C,UAAU,cAAcC,SA/DlC,SAAuBF,GACrBA,EAAEG,iBACe,KAAb7C,GAEFW,EAAWT,IA2DX,SACE,uBACA4C,KAAK,OACLC,YAAY,uBACZC,SArFN,SAAsBN,GACpBzC,EAAYyC,EAAEO,OAAOC,QAqFjBA,MAAOlD,MAGT,iCACE,oBAAI2C,UAAU,WAAd,SAA0BpC,IAC1B,oBAAIoC,UAAU,OAAd,SAAsBlC,IACtB,sBAAKkC,UAAU,QAAf,UAAwBxC,EAAxB,YACA,qBAAKwC,UAAU,eAAf,SAA+BtC,WCxGvC8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.f3f4eb47.chunk.js","sourcesContent":["// USER STORY\n// the site should be responsive to viewport size\n// user can type in to search for location \n// retrieve location's weather info from an api with city name\n// report if not found \n// show location name, date, tempt, weather, change background \n\nimport { useState } from 'react';\n\nfunction App() {\n  const api = {\n    key:\"9168607ecb0ef359fec85f8482b821c5\",\n    baseUrl:\"https://api.openweathermap.org/data/2.5/\"\n  }\n\n  //getting cityname from user input\n  const [cityname,setcityname] = useState(\"\");\n  function handleInput (e) {\n    setcityname(e.target.value)\n  }\n\n  \n  const reqUrl = `${api.baseUrl}weather?q=${cityname}&units=metric&appid=${api.key}`;\n\n  \n  // on submit, retrieve temp, weather description to state\n  // render on the screen \n  const [currentTemp,setTemp] = useState();\n  const [currentDescription, setDescription] = useState (\"\");\n  const [currentLocation, setLocation] = useState(\"\");\n  const [currentDate, setDate] = useState(\"\");\n\n\n\n\n  function handleSubmit (e) {\n    e.preventDefault();\n    if (cityname !== \"\") {\n      \n      getWeather(reqUrl);\n    }\n  }\n\n  const getWeather = function (url) {\n    \n    fetch(url)\n    .then(function(response) {\n      response.json()\n      .then( function (json) {\n        \n        setTemp(Math.round(json.main.temp));\n        setDescription(json.weather[0].description);\n        setLocation(`${json.name}, ${json.sys.country}` );\n        \n        // CACULATE DATE, TIME OF SEARCHED LOCATION by\n        // local time + timezone offset from UTC in milisecond \n        // (for example GMT +7 (SGN) is +25.200.000 milisecond from UTC)\n        // then add timezone offset of the destination\n        // (for example GMT -5 (Chicago) is -18.000.000 milisecond from UTC)\n        \n        const localTime = new Date().getTime(); \n        // obtain local UTC offset and convert to msec\n        //getTimezoneOffset() return the offSet in minutes\n        const localOffset = new Date().getTimezoneOffset() * 60000;\n        const utc = localTime + localOffset;\n        const offset = json.timezone*1000;  \n\n        const d = new Date((utc) + offset);\n\n        //convert to custom format date, time (AM/PM)\n        const date = d.toString().slice(0,15);\n        const time = d.toLocaleString(\n          'en-US', \n          { hour: 'numeric',\n          minute: 'numeric', \n          hour12: true });\n\n\n        setDate(`${date}, ${time}`);\n        setcityname(\"\");\n        \n      }).catch((e) => {\n        setLocation(\"Can't find this city name\");\n      });})\n  };\n\n\n  //change the background according to temparature\n  // above 15 Deg Celc. use warm background\n  // otherwise cold background\n  var bgImage;\n  if (currentTemp < 15) {\n    bgImage = \"cold\";\n  } else bgImage = \"warm\";\n  \n  return (\n    \n    <div className = {\"background \" + bgImage} >\n      <form className=\"search-pane\" onSubmit={handleSubmit}>\n        <input \n        type=\"text\" \n        placeholder=\"Search city name ...\"\n        onChange={handleInput}\n        value={cityname}\n        ></input>\n      </form>\n      <main>\n        <h1 className=\"location\">{currentLocation}</h1>\n        <h2 className=\"date\">{currentDate}</h2>\n        <div className=\"tempt\">{currentTemp} Â°C</div>\n        <div className=\"weather-type\">{currentDescription}</div>\n\n      </main>\n    </div>\n    \n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}